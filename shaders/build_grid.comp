#version 450
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_atomic_float: require

#define NUM_PARTICLES 64000
#define TABLE_SIZE 129631 
const uint PRIME1 = 19349663;
const uint PRIME2 = 73856093;
const uint PRIME3 = 83492791;
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

const uint OFFSET_CURR_POS      	= 0;
const uint OFFSET_PREV_POS      	= 3 * NUM_PARTICLES;
const uint OFFSET_VELOCITY      	= 6 * NUM_PARTICLES;
const uint OFFSET_DELTA         	= 9 * NUM_PARTICLES;
const uint OFFSET_COLLISIONS    	= 12 * NUM_PARTICLES;
const uint OFFSET_VORTICITY     	= 15 * NUM_PARTICLES;
const uint OFFSET_VORTICITY_GRAD	= 18 * NUM_PARTICLES;
const uint OFFSET_VISCOSITY     	= 21 * NUM_PARTICLES;
const uint OFFSET_LAMBDAS       	= 24 * NUM_PARTICLES;

layout(buffer_reference, std430) buffer ParticleBuffer{ 
	float data[];
};
layout(buffer_reference, std430) buffer UintBuffer{ 
	uint data[];
};

layout( push_constant ) uniform constants
{	
	ParticleBuffer particleBuffer;    
    UintBuffer gridCounter;
    UintBuffer gridCells;
    float timestep;
    float smoothingRadius;
    float restDensity;
    float particleMass;
} PushConstants;
vec3 loadVec3(uint baseOffset, uint index){
    return vec3(
        PushConstants.particleBuffer.data[baseOffset + (3 * index) + 0],
        PushConstants.particleBuffer.data[baseOffset + (3 * index) + 1],
        PushConstants.particleBuffer.data[baseOffset + (3 * index) + 2]
    );
}
void storeVec3(uint baseOffset, uint index, vec3 value) {
    PushConstants.particleBuffer.data[baseOffset + (3 * index) + 0] = value.x;
    PushConstants.particleBuffer.data[baseOffset + (3 * index) + 0] = value.y;
    PushConstants.particleBuffer.data[baseOffset + (3 * index) + 0] = value.z;
}
uint hashGridCoord(int x, int y, int z) {    
    uint xOffset = (x < 0) ? 1u : 0u;
    uint yOffset = (y < 0) ? 1u : 0u;
    uint zOffset = (z < 0) ? 1u : 0u;

    uint ux = uint(x) * 2u + xOffset;
    uint uy = uint(y) * 2u + yOffset;
    uint uz = uint(z) * 2u + zOffset;

    uint hash = (ux * PRIME1) ^ (uy * PRIME2) ^ (uz * PRIME3);
    return hash % TABLE_SIZE;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= NUM_PARTICLES) return;

    vec3 currPos = loadVec3(OFFSET_CURR_POS, index);
    ivec3 cellPos = ivec3(floor(currPos.x/PushConstants.smoothingRadius), floor(currPos.y/PushConstants.smoothingRadius), floor(currPos.z/PushConstants.smoothingRadius));
    uint cellHash = hashGridCoord(cellPos.x, cellPos.y, cellPos.z);
    uint cellGridIndex = atomicAdd(PushConstants.gridCounter.data[cellHash], 1);
    PushConstants.gridCells.data[(10 * cellHash) + cellGridIndex] = index;
}
